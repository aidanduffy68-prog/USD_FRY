#!/usr/bin/env python3
"""
Generate 3 different vulnerability visualizations for Part 2 article
Option 1: Bar Chart
Option 2: Scatter Plot
Option 3: Table/Matrix
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Set style
plt.style.use('seaborn-v0_8-darkgrid')

# Data
exchanges = ['Hyperliquid', 'dYdX v4', 'GMX v2', 'Binance']
vulnerability_scores = [9, 5, 3, 2]
attack_costs = [60, 500, 5000, 50000]  # Millions USD
cascade_risk = [95, 40, 15, 5]  # Percentage

colors = ['#FF0000', '#FF8800', '#FFD700', '#00CC00']  # Red to green

# ============================================
# Option 1: Horizontal Bar Chart (Clean & Simple)
# ============================================
def create_bar_chart():
    fig, ax = plt.subplots(figsize=(12, 8), facecolor='white')
    ax.set_facecolor('white')
    
    y_pos = np.arange(len(exchanges))
    bars = ax.barh(y_pos, vulnerability_scores, color=colors, alpha=0.8, height=0.6)
    
    # Add value labels on bars
    for i, (bar, score) in enumerate(zip(bars, vulnerability_scores)):
        ax.text(score + 0.2, bar.get_y() + bar.get_height()/2, 
               f'{score}/10', va='center', fontsize=16, weight='bold')
    
    # Add descriptions
    descriptions = [
        'Single-venue oracle | $19.3B cascade',
        'Validator consensus | Possible with collusion',
        'Chainlink + TWAP | Unlikely',
        'Multi-exchange index | Nearly impossible'
    ]
    
    for i, desc in enumerate(descriptions):
        ax.text(0.2, i, desc, va='center', fontsize=13, color='white', weight='bold')
    
    ax.set_yticks(y_pos)
    ax.set_yticklabels(exchanges, fontsize=18, weight='bold')
    ax.set_xlabel('Vulnerability Score', fontsize=16, weight='bold')
    # Remove title
    ax.set_xlim(0, 10)
    ax.grid(axis='x', alpha=0.3)
    
    # Move legend to bottom
    ax.text(5, -0.8, 'Single-venue oracles = Structural time bombs  |  Multi-source validation = Defense', 
           fontsize=13, ha='center', style='italic')
    
    plt.tight_layout()
    plt.savefig('marketing/charts/vulnerability_bar_chart.png', dpi=300, facecolor='white', bbox_inches='tight')
    print("‚úÖ Saved: marketing/charts/vulnerability_bar_chart.png")
    plt.close()

# ============================================
# Option 2: Scatter Plot (Attack Cost vs Risk)
# ============================================
def create_scatter_plot():
    fig, ax = plt.subplots(figsize=(12, 10), facecolor='white')
    ax.set_facecolor('#f8f9fa')

# ============================================
# Option 5: Scatter Plot for XP Window (Resized)
# ============================================
def create_scatter_plot_xp():
    # Sized to fit inside XP notepad window content area
    fig, ax = plt.subplots(figsize=(8, 5), facecolor='white')
    ax.set_facecolor('white')
    
    # Plot glow effect first (larger, semi-transparent circles behind main dots)
    for i, (x, y, color) in enumerate(zip(attack_costs, cascade_risk, colors)):
        ax.scatter(x, y, s=1500, c=color, alpha=0.15, edgecolors='none')  # Outer glow
        ax.scatter(x, y, s=1100, c=color, alpha=0.25, edgecolors='none')  # Inner glow
    
    # Plot main points on top
    scatter = ax.scatter(attack_costs, cascade_risk, s=800, c=colors, alpha=0.9, edgecolors='black', linewidth=2)
    
    # Add labels
    for i, exchange in enumerate(exchanges):
        ax.annotate(exchange, 
                   (attack_costs[i], cascade_risk[i]),
                   fontsize=13, weight='bold', ha='center', va='center')
    
    # Simplified quadrant labels (smaller for compact view)
    ax.text(100, 85, 'DANGER ZONE', 
           fontsize=11, ha='left', va='top', weight='bold', color='#CC0000')
    
    ax.text(40000, 85, 'SAFE ZONE', 
           fontsize=11, ha='right', va='top', weight='bold', color='#006600')
    
    ax.set_xlabel('Attack Cost (Millions USD)', fontsize=12, weight='bold')
    ax.set_ylabel('Cascade Risk (%)', fontsize=12, weight='bold')
    ax.set_xscale('log')
    ax.set_xlim(30, 100000)
    ax.set_ylim(0, 100)
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('marketing/charts/vulnerability_scatter_xp.png', dpi=300, facecolor='white', bbox_inches='tight')
    print("‚úÖ Saved: marketing/charts/vulnerability_scatter_xp.png")
    plt.close()
    # Add quadrant lines
    ax.axhline(y=50, color='gray', linestyle='--', alpha=0.5, linewidth=1)
    ax.axvline(x=2500, color='gray', linestyle='--', alpha=0.5, linewidth=1)
    
    # Label quadrants
    ax.text(100, 90, 'DANGER ZONE\nHigh Risk, Low Cost', 
           fontsize=12, ha='left', va='top', weight='bold', color='#CC0000',
           bbox=dict(boxstyle='round', facecolor='#FFE6E6', alpha=0.8))
    
    ax.text(40000, 90, 'Low Risk\nHigh Cost', 
           fontsize=12, ha='right', va='top', weight='bold', color='#006600',
           bbox=dict(boxstyle='round', facecolor='#E6FFE6', alpha=0.8))
    
    ax.text(100, 10, 'Low Risk\nLow Cost', 
           fontsize=12, ha='left', va='bottom', weight='bold', color='#666666',
           bbox=dict(boxstyle='round', facecolor='#F0F0F0', alpha=0.8))
    
    ax.text(40000, 10, 'SAFE ZONE\nLow Risk, High Cost', 
           fontsize=12, ha='right', va='bottom', weight='bold', color='#006600',
           bbox=dict(boxstyle='round', facecolor='#E6FFE6', alpha=0.8))
    
    ax.set_xlabel('Attack Cost (Millions USD)', fontsize=14, weight='bold')
    ax.set_ylabel('Cascade Risk (%)', fontsize=14, weight='bold')
    ax.set_title('Exchange Vulnerability: Attack Cost vs Cascade Risk', 
                fontsize=18, weight='bold', pad=20)
    ax.set_xscale('log')
    ax.set_xlim(30, 100000)
    ax.set_ylim(0, 100)
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('marketing/charts/vulnerability_scatter_plot.png', dpi=300, facecolor='white', bbox_inches='tight')
    print("‚úÖ Saved: marketing/charts/vulnerability_scatter_plot.png")
    plt.close()

# ============================================
# Option 3: Table/Matrix (Data-Dense)
# ============================================
def create_table_matrix():
    fig, ax = plt.subplots(figsize=(14, 8), facecolor='white')
    ax.axis('tight')
    ax.axis('off')
    
    # Data for table
    data = [
        ['Hyperliquid', 'Internal orderbook', 'None', 'None', '9/10', '$19.3B cascade ‚úÖ'],
        ['dYdX v4', 'Validator consensus', 'Median pricing', 'None', '5/10', 'Possible with collusion ‚ö†Ô∏è'],
        ['GMX v2', 'Chainlink + custom', 'TWAP + multi-source', 'Keeper-based', '3/10', 'Unlikely (expensive) ‚ö†Ô∏è'],
        ['Binance', 'Multi-exchange index', 'Cross-exchange', 'Manual halt', '2/10', 'Nearly impossible ‚úÖ']
    ]
    
    columns = ['Exchange', 'Oracle Source', 'Validation', 'Circuit Breakers', 'Vulnerability', 'October 10 Risk']
    
    # Create table
    table = ax.table(cellText=data, colLabels=columns, cellLoc='left', loc='center',
                    colWidths=[0.12, 0.18, 0.18, 0.15, 0.12, 0.25])
    
    table.auto_set_font_size(False)
    table.set_fontsize(11)
    table.scale(1, 3)
    
    # Style header
    for i in range(len(columns)):
        cell = table[(0, i)]
        cell.set_facecolor('#0054E3')
        cell.set_text_props(weight='bold', color='white', fontsize=12)
    
    # Style rows with colors
    row_colors = ['#FFE6E6', '#FFF0E6', '#FFFACD', '#E6FFE6']
    for i, color in enumerate(row_colors):
        for j in range(len(columns)):
            cell = table[(i+1, j)]
            cell.set_facecolor(color)
            if j == 4:  # Vulnerability column
                cell.set_text_props(weight='bold', fontsize=12)
    
    # Add title
    ax.text(0.5, 0.95, 'Exchange Architecture Vulnerability Matrix', 
           transform=ax.transAxes, fontsize=18, weight='bold', ha='center')
    
    # Add footer
    ax.text(0.5, 0.02, 'üí£ Single-venue oracles = Structural time bombs  |  üõ°Ô∏è Multi-source validation = Only defense', 
           transform=ax.transAxes, fontsize=12, ha='center', style='italic')
    
    plt.tight_layout()
    plt.savefig('marketing/charts/vulnerability_table_matrix.png', dpi=300, facecolor='white', bbox_inches='tight')
    print("‚úÖ Saved: marketing/charts/vulnerability_table_matrix.png")
    plt.close()

# ============================================
# Option 4: Pipeline Visual (Eye-Catching)
# ============================================
def create_pipeline_visual():
    fig, ax = plt.subplots(figsize=(14, 10), facecolor='white')
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')
    
    # Title
    ax.text(5, 9.5, 'How Exchange Architecture Creates Cascade Risk', 
           fontsize=20, weight='bold', ha='center')
    
    # Pipeline stages
    stages = ['Price Sources', 'Oracle', 'Risk Engine', 'Liquidations', 'Outcome']
    stage_x = [1, 2.5, 4.5, 6.5, 8.5]
    
    # Draw pipeline for each exchange
    exchanges_data = [
        ('Hyperliquid', 8.5, '#FF0000', ['Internal\nOrderbook', 'No\nValidation', 'Instant\nTrigger', 'ADL\nCascade', '$19.3B\nDestroyed']),
        ('dYdX v4', 6.5, '#FF8800', ['Validator\nConsensus', 'Median\nPrice', '30s\nDelay', 'Controlled\nLiquidation', 'Contained']),
        ('GMX v2', 4.5, '#FFD700', ['Chainlink\n+ Multi-CEX', 'TWAP\nSmoothing', 'Keeper\nCircuit', 'Gradual\nLiquidation', 'Minimal\nImpact']),
        ('Binance', 2.5, '#00CC00', ['Multi-Exchange\nIndex', 'Cross-Venue\nValidation', 'Manual\nHalt', 'Insurance\nFund', 'No\nCascade'])
    ]
    
    for i, (exchange, y_pos, color, stage_labels) in enumerate(exchanges_data):
        # Exchange name
        ax.text(0.2, y_pos, exchange, fontsize=14, weight='bold', va='center')
        
        # Draw pipeline boxes
        for j, (x, label) in enumerate(zip(stage_x, stage_labels)):
            # Box
            box_width = 0.8
            box_height = 0.6
            rect = plt.Rectangle((x - box_width/2, y_pos - box_height/2), 
                                box_width, box_height, 
                                facecolor=color, alpha=0.3, edgecolor=color, linewidth=2)
            ax.add_patch(rect)
            
            # Label
            ax.text(x, y_pos, label, fontsize=9, ha='center', va='center', weight='bold')
            
            # Arrow to next stage
            if j < len(stage_x) - 1:
                ax.arrow(x + box_width/2, y_pos, 
                        stage_x[j+1] - x - box_width, 0,
                        head_width=0.15, head_length=0.1, fc=color, ec=color, alpha=0.5)
    
    # Stage headers
    for x, stage in zip(stage_x, stages):
        ax.text(x, 9, stage, fontsize=11, ha='center', weight='bold', style='italic')
    
    # Legend at bottom
    ax.text(5, 0.5, 'Red = High Risk  |  Orange = Medium Risk  |  Yellow = Low Risk  |  Green = Minimal Risk', 
           fontsize=12, ha='center', style='italic')
    
    plt.tight_layout()
    plt.savefig('marketing/charts/vulnerability_pipeline.png', dpi=300, facecolor='white', bbox_inches='tight')
    print("‚úÖ Saved: marketing/charts/vulnerability_pipeline.png")
    plt.close()

# ============================================
# Main
# ============================================
def main():
    print("=" * 60)
    print("Creating Vulnerability Visualizations")
    print("=" * 60)
    
    create_bar_chart()
    create_scatter_plot()
    create_table_matrix()
    create_pipeline_visual()
    create_scatter_plot_xp()
    
    print("\n" + "=" * 60)
    print("All visualizations created!")
    print("=" * 60)
    print("\nFiles saved to marketing/charts/:")
    print("  - vulnerability_bar_chart.png (Option 1: Clean bars)")
    print("  - vulnerability_scatter_plot.png (Option 2: Risk vs Cost)")
    print("  - vulnerability_table_matrix.png (Option 3: Data table)")
    print("  - vulnerability_pipeline.png (Option 4: Pipeline flow - EYE-CATCHING)")
    print("  - vulnerability_scatter_xp.png (Option 5: Scatter for XP window)")

if __name__ == "__main__":
    main()
